generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

plugin zod {
  provider = '@core/zod'
}

model User {
  id            Int                 @id @default(autoincrement())
  email         String              @unique
  name          String?
  password      String              @password @omit
  posts         Post[]
  authCodes     AuthorizationCode[]
  accessTokens  AccessToken[]
  refreshTokens RefreshToken[]

  @@allow('read', true)
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?     @default(auth().id)

  @@allow('all', auth() == author)
  // logged-in users can view published posts
  @@allow('read', auth() != null && published)
}



// OAuth2 models
model OAuthClient {
  id                       Int      @id @default(autoincrement())
  client_id                String   @unique
  client_secret            String?
  client_name              String?
  redirect_uris            Json     // Array of redirect URIs
  grant_types              Json     // Array of grant types
  response_types           Json     // Array of response types
  scope                    String?
  client_id_issued_at      Int
  client_secret_expires_at Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model AuthorizationCode {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  clientId      String
  userId        Int
  codeChallenge String
  redirectUri   String
  expiresAt     DateTime
  scopes        Json     // Array of scopes
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  clientId  String
  userId    Int
  scopes    Json     // Array of scopes
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  clientId  String
  userId    Int
  scopes    Json     // Array of scopes
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
