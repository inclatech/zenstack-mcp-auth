//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int                 @id() @default(autoincrement())
  email         String              @unique()
  name          String?
  password      String
  posts         Post[]
  authCodes     AuthorizationCode[]
  accessTokens  AccessToken[]
  refreshTokens RefreshToken[]
}

model Post {
  id        Int      @id() @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model OAuthClient {
  id                       Int      @id() @default(autoincrement())
  client_id                String   @unique()
  client_secret            String?
  client_name              String?
  redirect_uris            Json
  grant_types              Json
  response_types           Json
  scope                    String?
  client_id_issued_at      Int
  client_secret_expires_at Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt()
}

model AuthorizationCode {
  id            Int      @id() @default(autoincrement())
  code          String   @unique()
  clientId      String
  userId        Int
  codeChallenge String
  redirectUri   String
  expiresAt     DateTime
  scopes        Json
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
  id        Int      @id() @default(autoincrement())
  token     String   @unique()
  clientId  String
  userId    Int
  scopes    Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id() @default(autoincrement())
  token     String   @unique()
  clientId  String
  userId    Int
  scopes    Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
